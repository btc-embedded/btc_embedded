# ------------------------------------------------------------------
# Global config file for BTC EmbeddedPlatform CI workflow
#   - set environment variable BTC_API_CONFIG_FILE to point to a copy of this YAML file
#   - recommended location on Windows: %PROGRAMDATA%/BTC/ep
#
# If you want to also apply a project-specific config, use get_merged_config(...):
#
#   from btc_embedded import get_merged_config
#   test_config_path = os.path.abspath('project_specific_config.yml')
#   merged_config = get_merged_config(project_config=test_config_path)
#
# If the environment variable BTC_API_CONFIG_FILE is not set:
#   - a default config from the pip package btc_embedded is used
#   - https://github.com/btc-embedded/btc_embedded/blob/main/btc_embedded/btc_config.yml
# ------------------------------------------------------------------

# General settings - will be considered when creating the api object: ep = EPRestApi()
installationRoot: C:/Program Files/BTC
epVersion: 24.1p0
#licenseLocation: 27000@10.18.2.1

# Preferences: key-value pairs according to
# documentation/User Guide/BTC EmbeddedPlatform Preference Configuration Guide.pdf
# - any relative paths will be resolved to the parent directory of the file
#   indicated by the environment variable BTC_API_CONFIG_FILE
# - the existance of the env var is mandatory for using relative path.
preferences:
  GENERAL_MATLAB_CUSTOM_VERSION: MATLAB R2023b (64-bit)
  GENERAL_COMPILER_SETTING: (Internal) MinGW64 (64bit)
  SIMULATION_MIL_NUMBER_OF_MATLAB_INSTANCES: 1
  REPORT_TEMPLATE_FOLDER: report-templates
  # settings for EmbeddedCoder Architecture Update
  EC_ARCHITECTURE_UPDATE_CODE_META_SOURCE: MODEL_ANALYSIS
  EC_ARCHITECTURE_UPDATE_MAPPING_SOURCE: PROFILE
  # ARCHITECTURE_EC_CUSTOM_USER_CONFIGURATION_FOLDER: my-ec-user-config-folder

# Tolerances can be defined for RBT (requirements-based tests) and B2B (back-to-back & regression tests)
# and will automatically be applied (supported with EP 24.1 and beyond)
# For each scope, for each DISP/OUT the signal is checked:
# 1. Does the signal name match any of the "signal-name-based" tolerance definitions?
#   -> first matching tolerance definition is applied (based on regex <-> signal-name)
#   If no signal-name based tolerance was defined, default tolerances based no data type are considered:
# 2. Does the signal use a floating point data type? [ 'double', 'single', 'float', 'float32', 'float64', 'real' ]
#   -> apply default tolerances for floats (if defined)
# 3. Does the signal use a fixed-point data type? (integer with LSB < 1)
#   -> apply default tolerances for fixed-point (if defined)
#   -> tolerance can also be defined as a multiple of the LSB (e.g. 1*LSB)
#
# abs: absolute tolerance - a deviation <= abs will be accepted as PASSED
# rel: relative tolerance - accepted deviation <= (reference value * rel) will be accepted as PASSED
#      useful for floats to compensate for low precision on high float values
# default_tolerances:
#   B2B: 
#     signal-name-based:
#       - regex: .*_write.*
#         abs: 1e-1
#         rel: 2e-1
#       - regex: .*dsout_.*
#         abs: 1e-2
#         rel: 2e-2
#     floating-point:
#       abs: 0.001
#       rel: 0.01
#     fixed-point:
#       abs: 1*LSB

# Additionally, you can specify arbitrary key-value pairs to use them in your scripts
# The goal is to separate any configuration from the code, so you can adapt your
# configuration without changing your code.
# 
# Example definition:
# myFavouriteReportName: awesome-test-report
# 
# Example usage:
# config = get_global_config()
# ...
# print("Creating report " + config['myFavouriteReportName']) 
# ep.post(f"reports/{report['uid']}", { 'exportPath': work_dir, 'newName': config['myFavouriteReportName'] })
