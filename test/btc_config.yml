# ------------------------------------------------------------------
# Global config file for BTC EmbeddedPlatform CI workflow
# - set environment variable BTC_API_CONFIG_FILE to point to this YAML file
# - this config is merged with a project-specific config (if present)
# - the project-specific config has precedence in case of conflicts
#
# - if BTC_API_CONFIG_FILE is not set:
#   - a default config from the pip package btc_embedded is used
#   - https://github.com/btc-embedded/btc_embedded/blob/main/btc_embedded/btc_config.yml
#
# If you want to also apply a project-specific config:
#
# from btc_embedded import get_merged_config
# test_config_abs_path = os.path.abspath('project_specific_config.yml')
# merged_config = get_merged_config(project_config=test_config_abs_path)
#
# ------------------------------------------------------------------

# Preferences: key-value pairs according to
# documentation/User Guide/BTC EmbeddedPlatform Preference Configuration Guide.pdf
# - any relative paths will be resolved to the parent directory of the file
#   indicated by the environment variable BTC_API_CONFIG_FILE
# - the existance of the env var is mandatory for using relative path.
preferences:
  GENERAL_COMPILER_SETTING: GCC (64bit)
  REQUIREMENT_BEHAVIOR_ONLY_IN_LEAVES: true
  SIMULATION_MIL_NUMBER_OF_MATLAB_INSTANCES: 1
  REPORT_TEMPLATE_FOLDER: report_templates # can be a relative path from this file's location
  # settings for EmbeddedCoder Architecture Update
  EC_ARCHITECTURE_UPDATE_CODE_META_SOURCE: MODEL_ANALYSIS
  EC_ARCHITECTURE_UPDATE_MAPPING_SOURCE: PROFILE
  # ARCHITECTURE_EC_CUSTOM_USER_CONFIGURATION_FOLDER: my-ec-user-config-folder

# Tolerances can be defined for RBT (requirements-based tests) and B2B (back-to-back & regression tests)
# Tolerances defined here will automatically be applied (supported with EP 24.1 and beyond)
# default_tolerances:
#   B2B: 
#     floating-point:
#       abs: '0.001'
#       rel: '0.01'
#     fixed-point: # integers with LSB < 1
#       abs: '1*LSB'

# Additionally, you can specify arbitrary key-value pairs to use them in your scripts
# The goal is to separate any configuration from the code, so you can adapt your
# configuration without changing your code.
# 
# Example definition:
# myFavouriteReportName: awesome-test-report
# 
# Example usage:
# config = get_global_config()
# ...
# print("Creating report " + config['myFavouriteReportName']) 
# ep.post(f"reports/{report['uid']}", { 'exportPath': work_dir, 'newName': config['myFavouriteReportName'] })
